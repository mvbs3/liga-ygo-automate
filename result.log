============================= test session starts ==============================
platform linux -- Python 3.12.3, pytest-8.3.5, pluggy-1.5.0
rootdir: /home/marcelo-victor/Desktop/liga-ygo-automate
collected 3 items

teste_compras.py ..F                                                     [100%]

=================================== FAILURES ===================================
_________________ test_pesquisar_carta[Vanquish Soul Jiaolong] _________________

browser = <selenium.webdriver.chrome.webdriver.WebDriver (session="65aaabf7f1ef62a1c362ac64a382c67a")>
carta = 'Vanquish Soul Jiaolong'

    @pytest.mark.parametrize("carta", get_cartas())
    def test_pesquisar_carta(browser, carta):
        browser.get("https://www.ligayugioh.com.br/")
        time.sleep(2)
    
        try:
            # Fecha banner promocional se existir
            try:
                campanha = browser.find_element(By.ID, "campanha-del-1")
                campanha.click()
                time.sleep(1)
            except:
                pass
    
            # Fecha banner de cookies se aparecer
            try:
                cookie_banner = browser.find_element(By.CLASS_NAME, "lgpd-button")
                cookie_banner.click()
                time.sleep(1)
            except:
                pass
    
            # Pesquisa a carta
            pesquisa = browser.find_element(By.ID, "mainsearch")
            pesquisa.clear()
            pesquisa.send_keys(carta)
            pesquisa.send_keys(Keys.ENTER)
            time.sleep(3)
    
            # Verifica se h치 resultados com classe 'box p25'
            boxes = browser.find_elements(By.CLASS_NAME, "box")
            resultados_encontrados = False
            pagina_carta = False
    
            for box in boxes:
                    try:
                        link = box.find_element(By.CSS_SELECTOR, ".mtg-name a")
                        try:
                            link_aux = box.find_element(By.CSS_SELECTOR, ".mtg-name-aux a")
                            nome_link_aux = link_aux.get_attribute("innerHTML").strip()
                        except:
                            nome_link_aux = ""
                        nome_link = link.get_attribute("innerHTML").strip()
                        if carta.lower() == nome_link.lower() or carta.lower() == nome_link_aux.lower():
                            print(f"Carta encontrada: {nome_link}")
                            print(link.get_attribute("href"))
                            resultados_encontrados = True
    
                            link.click()
                            print("Redirecionado para a p치gina da carta.")
                            pagina_carta = True
                            time.sleep(2)
                            break
                    except:
                        continue
    
            if not resultados_encontrados:
                try:
                    erro = browser.find_element(By.CLASS_NAME, "alertaErro")
                    if erro:
                        print("Nenhuma carta encontrada.")
                        assert False
                except:
                    pass
                print("J치 estou na p치gina da carta.")
                pagina_carta = True
    
            if pagina_carta:
                try:
>                   preco_elemento = browser.find_element(By.CLASS_NAME, "new-price")

teste_compras.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:898: in find_element
    return self.execute(Command.FIND_ELEMENT, {"using": by, "value": value})["value"]
venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7070b452c950>
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\\n#17 0x5fb4aa18a5a6 \\u003Cunknown>\\n#18 0x7fe670c9caa4 \\u003Cunknown>\\n#19 0x7fe670d29c3c \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"css selector","selector":".new-price"}
E         (Session info: chrome=135.0.7049.52); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
E       Stacktrace:
E       #0 0x5fb4aa18b75a <unknown>
E       #1 0x5fb4a9c3e4b0 <unknown>
E       #2 0x5fb4a9c8f9b3 <unknown>
E       #3 0x5fb4a9c8fba1 <unknown>
E       #4 0x5fb4a9cde1f4 <unknown>
E       #5 0x5fb4a9cb55bd <unknown>
E       #6 0x5fb4a9cdb5e0 <unknown>
E       #7 0x5fb4a9cb5363 <unknown>
E       #8 0x5fb4a9c81d63 <unknown>
E       #9 0x5fb4a9c829c1 <unknown>
E       #10 0x5fb4aa150a6b <unknown>
E       #11 0x5fb4aa154951 <unknown>
E       #12 0x5fb4aa138b62 <unknown>
E       #13 0x5fb4aa1554c4 <unknown>
E       #14 0x5fb4aa11d13f <unknown>
E       #15 0x5fb4aa1796f8 <unknown>
E       #16 0x5fb4aa1798d6 <unknown>
E       #17 0x5fb4aa18a5a6 <unknown>
E       #18 0x7fe670c9caa4 <unknown>
E       #19 0x7fe670d29c3c <unknown>

venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: NoSuchElementException

During handling of the above exception, another exception occurred:

browser = <selenium.webdriver.chrome.webdriver.WebDriver (session="65aaabf7f1ef62a1c362ac64a382c67a")>
carta = 'Vanquish Soul Jiaolong'

    @pytest.mark.parametrize("carta", get_cartas())
    def test_pesquisar_carta(browser, carta):
        browser.get("https://www.ligayugioh.com.br/")
        time.sleep(2)
    
        try:
            # Fecha banner promocional se existir
            try:
                campanha = browser.find_element(By.ID, "campanha-del-1")
                campanha.click()
                time.sleep(1)
            except:
                pass
    
            # Fecha banner de cookies se aparecer
            try:
                cookie_banner = browser.find_element(By.CLASS_NAME, "lgpd-button")
                cookie_banner.click()
                time.sleep(1)
            except:
                pass
    
            # Pesquisa a carta
            pesquisa = browser.find_element(By.ID, "mainsearch")
            pesquisa.clear()
            pesquisa.send_keys(carta)
            pesquisa.send_keys(Keys.ENTER)
            time.sleep(3)
    
            # Verifica se h치 resultados com classe 'box p25'
            boxes = browser.find_elements(By.CLASS_NAME, "box")
            resultados_encontrados = False
            pagina_carta = False
    
            for box in boxes:
                    try:
                        link = box.find_element(By.CSS_SELECTOR, ".mtg-name a")
                        try:
                            link_aux = box.find_element(By.CSS_SELECTOR, ".mtg-name-aux a")
                            nome_link_aux = link_aux.get_attribute("innerHTML").strip()
                        except:
                            nome_link_aux = ""
                        nome_link = link.get_attribute("innerHTML").strip()
                        if carta.lower() == nome_link.lower() or carta.lower() == nome_link_aux.lower():
                            print(f"Carta encontrada: {nome_link}")
                            print(link.get_attribute("href"))
                            resultados_encontrados = True
    
                            link.click()
                            print("Redirecionado para a p치gina da carta.")
                            pagina_carta = True
                            time.sleep(2)
                            break
                    except:
                        continue
    
            if not resultados_encontrados:
                try:
                    erro = browser.find_element(By.CLASS_NAME, "alertaErro")
                    if erro:
                        print("Nenhuma carta encontrada.")
                        assert False
                except:
                    pass
                print("J치 estou na p치gina da carta.")
                pagina_carta = True
    
            if pagina_carta:
                try:
                    preco_elemento = browser.find_element(By.CLASS_NAME, "new-price")
                    preco = extrair_preco_com_ocr(preco_elemento)
                    print(f"Pre칞o da carta '{carta}': {preco}")
                    assert True
                except:
                    print(f"Pre칞o n칚o encontrado visualmente para: {carta}")
>                   assert False
E                   assert False

teste_compras.py:117: AssertionError

During handling of the above exception, another exception occurred:

browser = <selenium.webdriver.chrome.webdriver.WebDriver (session="65aaabf7f1ef62a1c362ac64a382c67a")>
carta = 'Vanquish Soul Jiaolong'

    @pytest.mark.parametrize("carta", get_cartas())
    def test_pesquisar_carta(browser, carta):
        browser.get("https://www.ligayugioh.com.br/")
        time.sleep(2)
    
        try:
            # Fecha banner promocional se existir
            try:
                campanha = browser.find_element(By.ID, "campanha-del-1")
                campanha.click()
                time.sleep(1)
            except:
                pass
    
            # Fecha banner de cookies se aparecer
            try:
                cookie_banner = browser.find_element(By.CLASS_NAME, "lgpd-button")
                cookie_banner.click()
                time.sleep(1)
            except:
                pass
    
            # Pesquisa a carta
            pesquisa = browser.find_element(By.ID, "mainsearch")
            pesquisa.clear()
            pesquisa.send_keys(carta)
            pesquisa.send_keys(Keys.ENTER)
            time.sleep(3)
    
            # Verifica se h치 resultados com classe 'box p25'
            boxes = browser.find_elements(By.CLASS_NAME, "box")
            resultados_encontrados = False
            pagina_carta = False
    
            for box in boxes:
                    try:
                        link = box.find_element(By.CSS_SELECTOR, ".mtg-name a")
                        try:
                            link_aux = box.find_element(By.CSS_SELECTOR, ".mtg-name-aux a")
                            nome_link_aux = link_aux.get_attribute("innerHTML").strip()
                        except:
                            nome_link_aux = ""
                        nome_link = link.get_attribute("innerHTML").strip()
                        if carta.lower() == nome_link.lower() or carta.lower() == nome_link_aux.lower():
                            print(f"Carta encontrada: {nome_link}")
                            print(link.get_attribute("href"))
                            resultados_encontrados = True
    
                            link.click()
                            print("Redirecionado para a p치gina da carta.")
                            pagina_carta = True
                            time.sleep(2)
                            break
                    except:
                        continue
    
            if not resultados_encontrados:
                try:
                    erro = browser.find_element(By.CLASS_NAME, "alertaErro")
                    if erro:
                        print("Nenhuma carta encontrada.")
                        assert False
                except:
                    pass
                print("J치 estou na p치gina da carta.")
                pagina_carta = True
    
            if pagina_carta:
                try:
                    preco_elemento = browser.find_element(By.CLASS_NAME, "new-price")
                    preco = extrair_preco_com_ocr(preco_elemento)
                    print(f"Pre칞o da carta '{carta}': {preco}")
                    assert True
                except:
                    print(f"Pre칞o n칚o encontrado visualmente para: {carta}")
                    assert False
    
        except Exception as e:
            print(f"Erro ao pesquisar a carta {carta}: {e}")
>           assert False
E           assert False

teste_compras.py:121: AssertionError
----------------------------- Captured stdout call -----------------------------
Nenhuma carta encontrada.
J치 estou na p치gina da carta.
Pre칞o n칚o encontrado visualmente para: Vanquish Soul Jiaolong
Erro ao pesquisar a carta Vanquish Soul Jiaolong: assert False
=========================== short test summary info ============================
FAILED teste_compras.py::test_pesquisar_carta[Vanquish Soul Jiaolong] - asser...
========================= 1 failed, 2 passed in 48.71s =========================
