name: Run Tests Daily

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * *'  # Roda todo dia √†s 12h UTC (9h BRT)

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      # Limitar execu√ß√µes simult√¢neas para evitar bloqueios
      max-parallel: 1
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    #- name: Install dependencies
    #  run: pip install -r requirements.txt
    #- name: Install latest compatible dependencies (ignora travas)
    #  run: |
    #    pip install --upgrade --no-deps $(awk '{print $1}' requirements.txt)
    - name: Instalar Chrome
      run: |
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
    
      
    - name: Instalar depend√™ncias (√∫ltimas vers√µes)
      run: |
        pip install --upgrade pip
        pip install --upgrade $(sed 's/[<=>].*//' requirements.txt)
    - name: Install Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        google-chrome --version  # Para verificar a instala√ß√£o
        
    - name: Instalar Tesseract OCR
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr libtesseract-dev tesseract-ocr-por
    
    - name: Install Chrome Webdriver
      run: |
        echo "Detectando vers√£o do Chrome..."
        CHROME_VERSION=$(google-chrome --version)
        echo "Vers√£o do Chrome detectada: ${CHROME_VERSION}"
        
        echo "For√ßando uso da √∫ltima vers√£o est√°vel do ChromeDriver..."
        CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE")
        
        echo "Vers√£o do ChromeDriver a ser instalada: ${CHROMEDRIVER_VERSION}"
        echo "Baixando ChromeDriver..."
        wget -O chromedriver_linux64.zip "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
        
        if [ ! -f chromedriver_linux64.zip ]; then
          echo "Falha ao baixar o ChromeDriver. Arquivo n√£o encontrado."
          exit 1
        fi
        
        echo "Verificando o arquivo ZIP..."
        file chromedriver_linux64.zip
        
        echo "Descompactando o ChromeDriver..."
        unzip -o chromedriver_linux64.zip
        
        if [ ! -f chromedriver ]; then
          echo "Falha ao descompactar o ChromeDriver. Arquivo n√£o encontrado."
          exit 1
        fi
        
        echo "Movendo ChromeDriver para /usr/local/bin/"
        sudo mv -f chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
        
        echo "Verificando a instala√ß√£o do ChromeDriver:"
        which chromedriver
        chromedriver --version
    - name: Executar testes com retry e delay
      env:
        PYTHONUNBUFFERED: 1
      run: |
        # Configurar limite de tempo para cada teste e retry autom√°tico
        python -m pytest teste_compras.py -v --durations=0 -xvs > result.log || echo "Testes conclu√≠dos com falhas"
    
    #- name: Run tests
    #  run: |
    #    pytest teste_compras.py > result.log || echo "Testes falharam"
    - name: checking logs
      run: |
            cat result.log
    - name: Upload HTML para debug
      uses: actions/upload-artifact@v4
      with:
        name: debug-html
        path: page_debug.html

    - name: Check if all tests passed
      id: check
      run: |
        if grep -q "Pre√ßo n√£o encontrado visualmente" result.log; then
          echo "success=false" >> $GITHUB_OUTPUT
        else
          echo "success=true" >> $GITHUB_OUTPUT
        fi
    - name: Verificar conte√∫do do resultado_cartas.json
      run: cat resultado_cartas.json
    
    - name: Create email body
      id: email_content
      run: |
        echo "body<<EOF" >> $GITHUB_OUTPUT
        echo "üìä Resultado da busca de cartas üìä" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "‚úÖ Cartas encontradas:" >> $GITHUB_OUTPUT
        jq -r '.encontradas[] | "- \(.0): R$ \(.1)"' resultado_cartas.json >> $GITHUB_OUTPUT || echo "Nenhuma carta encontrada" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "‚ùå Cartas n√£o encontradas:" >> $GITHUB_OUTPUT
        jq -r '.nao_encontradas[] | "- \(.)"' resultado_cartas.json >> $GITHUB_OUTPUT || echo "Nenhuma carta na lista de n√£o encontradas" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Send success email
      if: steps.check.outputs.success == 'true'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "‚úÖ Todas as cartas est√£o dispon√≠veis!"
        to: marcelobs.victor@gmail.com
        from: ${{ secrets.EMAIL_USERNAME }}
        body: ${{ steps.email_content.outputs.body }}

    - name: Send failure email
      if: steps.check.outputs.success == 'false'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "‚ùå Carta(s) n√£o encontradas"
        to: marcelobs.victor@gmail.com
        from: ${{ secrets.EMAIL_USERNAME }}
        body: ${{ steps.email_content.outputs.body }}
